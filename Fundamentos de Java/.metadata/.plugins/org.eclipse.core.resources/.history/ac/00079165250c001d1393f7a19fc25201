package m8_4Main;

import java.util.ArrayList;
import java.util.Scanner;
import herencia.Building;
import herencia.Cinema;
import herencia.Hospital;
import herencia.Hotel;

public class Main {
	
	static Scanner sc = new Scanner(System.in);
	
	public static void main(String[] args) {
		
		ArrayList<Building> listBuildings = new ArrayList<Building>();
		
		Cinema odeon = new Cinema("Odeon", 15, 4000, 100);
		Cinema vue = new Cinema("Vue", 30, 2500, 100);
		Hotel hilton = new Hotel("Hilton", 25, 1000, 50);
		Hotel raddison = new Hotel("Raddison Blu", 25, 1000, 50);
		Hospital castleHill = new Hospital("Castle Hill", 25, 1000, 1300);
		Hospital hullRoyal = new Hospital("Hull Royal", 25, 1000, 700);
		
		listBuildings.add(odeon);
		listBuildings.add(vue);
		listBuildings.add(hilton);
		listBuildings.add(raddison);
		listBuildings.add(castleHill);
		listBuildings.add(hullRoyal);
		
		System.out.println(listBuildings);
		
		boolean exit = false;
		
		do {
			switch (mainMenu()) {
			case 1:
				createBuilding(listBuildings);
				break;
			case 2:
				deleteBuilding(listBuildings);
				break;
			case 3:
				showBuilding(listBuildings);
				break;
			case 4:
				showBuildings(listBuildings);
				break;
			case 0:
				System.out.println("Thank you for using this application.");
				exit = true;
			}
		} while (!exit);
		
		System.out.println(listBuildings);
	}
	
	private static void showBuilding(ArrayList<Building> listBuildings) {
		
	}

	
	private static void showBuildings(ArrayList<Building> listBuildings) {
		
	}


	private static int searchBuilding(ArrayList<Building> listBuildings) {
		boolean found = false;
		int position = -1;
		int i = 0;
		String name;
		
		int size = listBuildings.size();
		
		System.out.println("Enter the name of the building you want to find: ");
		name = sc.nextLine();
		
		while (!found && i < size) {
			if (listBuildings.get(i).getName().equalsIgnoreCase(name)) {
				found = true;
				position = i;
			}
			i++;
		}
		return position;
	}


	private static void createBuilding(ArrayList<Building> listBuildings) {
		
		boolean exit = false;
		
		searchBuilding(listBuildings);
		
		do  {
			Scanner sc = new Scanner(System.in);
			
			System.out.println("Enter name of building: ");
			String name = sc.nextLine();
			sc.nextLine();
			
			System.out.println("Enter number of floors: ");
			int numFloors = sc.nextInt();

			System.out.println("Enter total surface area of the building: ");
			int surfaceArea = sc.nextInt();
			
			System.out.println("Enter type of building: \n1. Hotel \n2. Hospital \n3. Cinema\n");
			int type = sc.nextInt();
			
			switch (type) {
			case 1: 
				System.out.println("Enter number of rooms: ");
				int numRooms = sc.nextInt();
				Hotel hotel = new Hotel(name, numFloors, surfaceArea, numRooms);
				listBuildings.add(hotel);
			case 2: 
				System.out.println("Enter number of patients: ");
				int patients = sc.nextInt();
				Hospital hospital = new Hospital(name, numFloors, surfaceArea, patients);
				listBuildings.add(hospital);
			case 3: 
				System.out.println("Enter capacity: ");
				int capacity = sc.nextInt();
				Cinema cinema = new Cinema(name, numFloors, surfaceArea, capacity);
				listBuildings.add(cinema);
			default: 
				System.out.println("You have chosen an invalid option.");
			}
			

		} while (!exit);
			System.out.println("The hotel you are looking for is not in our database");
	}


	private static void deleteBuilding(ArrayList<Building> listBuildings) {
		// TODO Auto-generated method stub
		
	}

	private static byte mainMenu() {
		
		byte option;
		final byte MIN = 0;
		final byte MAX = 3;
		
		do {
			System.out.println("\n*** MAIN MENU ***\n");
			System.out.println("1. Register a new building");
			System.out.println("2. Display building");
			System.out.println("3. Remove building");
			System.out.println("0. Exit application\n");
			option = sc.nextByte();
			
			if (option < MIN || option > MAX) {
				System.out.println("Choose a valid option!");
			}
		} while (option < MIN || option > MAX);
		return option;
	}

	}
